/*
 * This file was last modified at 2020.03.01 00:04 by Victor N. Skurikhin.
 * This is free and unencumbered software released into the public domain.
 * For more information, please refer to <http://unlicense.org>
 * build.gradle
 * $Id$
 */

/*
 * Copyright 2019-2020
 */

buildscript {
  def liquibase_gradle_plugin = System.getProperty('VERSION_LIQUIBASE_GRADLE_PLUGIN') ?: VERSION_LIQUIBASE_GRADLE_PLUGIN
  def liquibase = System.getProperty('VERSION_ORG_LIQUIBASE') ?: VERSION_ORG_LIQUIBASE
  def thorntail = System.getProperty('VERSION_THORNTAIL') ?: VERSION_THORNTAIL

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
  }

  dependencies {
    classpath "gradle.plugin.com.avast.gradle:gradle-docker-compose-plugin:0.9.5"
    classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    classpath "io.thorntail:thorntail-gradle-plugin:$thorntail"
    classpath "org.padler.gradle.minify:gradle-minify-plugin:1.1.1"
    classpath("org.liquibase:liquibase-gradle-plugin:$liquibase_gradle_plugin") {
      exclude(module: 'liquibase-core') // exclude the dependency on liquibase-core:3.6.3
    }
    classpath("org.liquibase:liquibase-core:$liquibase")

  }
}

apply plugin: 'com.avast.gradle.docker-compose'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'org.padler.gradle.minify'
apply plugin: 'thorntail'
apply plugin: 'thorntail-arquillian'
apply plugin: 'war'

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "https://maven.repository.redhat.com/ga"
  }
  maven {
    url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases"
  }
  maven {
    url "https://repo.gradle.org/gradle/libs-releases-local"
  }
  maven {
    url "https://repo.spring.io/plugins-release"
  }
}

ext.dirs = [
    object_store              : file("${projectDir}/ObjectStore"),
    out                       : file("${projectDir}/out"),
    put_object_store_dir_here : file("${projectDir}/PutObjectStoreDirHere"),
]

static def getEnv(key, defaultValue) {
  return System.getenv(key) ?: defaultValue
}

def hibernate_jpa_2_1_api = getEnv('VERSION_HIBERNATE_JPA_2_1_API', VERSION_HIBERNATE_JPA_2_1_API)
def jb_trn_api_1_2 = '1.1.1.Final'

ext.libVers = [
    drv_org_postgresql      : getEnv('VERSION_DRV_ORG_POSTGRESQL', VERSION_DRV_ORG_POSTGRESQL),
    gradle_tooling_api      : getEnv('VERSION_GRADLE_TOOLING_API', VERSION_GRADLE_TOOLING_API),
    hibernate               : getEnv('VERSION_ORG_HIBERNATE', VERSION_ORG_HIBERNATE),
    javax_servlet_api       : getEnv('VERSION_JAVAX_SERVLET_API', VERSION_JAVAX_SERVLET_API),
    jsf                     : getEnv('VERSION_JSF', VERSION_JSF),
    liquibase               : getEnv('VERSION_ORG_LIQUIBASE', VERSION_ORG_LIQUIBASE),
    liquibase_gradle_plugin : getEnv('VERSION_LIQUIBASE_GRADLE_PLUGIN', VERSION_LIQUIBASE_GRADLE_PLUGIN),
    liquibase_groovy_dsl    : getEnv('VERSION_LIQUIBASE_GROOVY_DSL', VERSION_LIQUIBASE_GROOVY_DSL),
    primefaces              : getEnv('VERSION_PRIMEFACES', VERSION_PRIMEFACES),
    projectlombok           : getEnv('VERSION_PROJECTLOMBOK', VERSION_PROJECTLOMBOK),
    slf4j                   : getEnv('VERSION_ORG_SLF4J_VERSION', VERSION_ORG_SLF4J_VERSION),
    thorntail               : getEnv('VERSION_THORNTAIL', VERSION_THORNTAIL),

    arq_trn_jta             : '1.0.5',
    arquillian              : '1.5.0.Final',
    assertj_core            : '3.15.0',
    commons_collects        : '3.2.2',
    h2_database             : '1.4.197',
    jboss_logging           : '3.4.1.Final',
    jboss_weld_se           : '3.1.2.Final',
    jnpserver               : '5.0.5.Final',
    jsr305                  : '1.3.9',
    junit                   : '5.6.0',
    junit_platform_launcher : '1.6.0',
    mockito_core            : '3.2.4',
    narayana_jta            : '5.10.3.Final',
    weld_junit5             : '2.0.1.Final',
]

dependencyManagement {
  imports {
    mavenBom "io.thorntail:bom-all:$libVers.thorntail"
    mavenBom "org.jboss.arquillian:arquillian-bom:${libVers.arquillian}"
  }
}

dependencies {
  compile group: 'com.google.code.findbugs', name: 'jsr305', version: libVers.jsr305
  compile group: 'commons-collections', name: 'commons-collections', version: libVers.commons_collects
  compile group: 'io.thorntail', name: 'thorntail-runner', version: libVers.thorntail
  compile group: 'org.postgresql', name: 'postgresql', version: libVers.drv_org_postgresql
  compile group: 'org.primefaces', name: 'primefaces', version: libVers.primefaces
  compile group: 'org.slf4j', name: 'slf4j-api', version: libVers.slf4j
  compile group: 'org.slf4j', name: 'slf4j-simple', version: libVers.slf4j

  compile "com.h2database:h2:${libVers.h2_database}"
  compile "io.thorntail:bean-validation"
  compile "io.thorntail:cdi"
  compile "io.thorntail:datasources"
  compile "io.thorntail:ee-security"
  compile "io.thorntail:ejb"
  compile "io.thorntail:ejb-mdb"
  compile "io.thorntail:hibernate-validator"
  compile "io.thorntail:jpa"
  compile "io.thorntail:jsf"
  compile "io.thorntail:logging"
  compile "io.thorntail:logstash"
  compile "io.thorntail:microprofile-metrics"
  compile "io.thorntail:microprofile-restclient"
  compile "io.thorntail:undertow"

  liquibaseRuntime group: 'org.liquibase', name: 'liquibase-core', version: libVers.liquibase
  liquibaseRuntime group: 'org.liquibase', name: 'liquibase-gradle-plugin', version: libVers.liquibase_gradle_plugin
  liquibaseRuntime group: 'org.liquibase', name: 'liquibase-groovy-dsl', version: libVers.liquibase_groovy_dsl
  liquibaseRuntime group: 'org.postgresql', name: 'postgresql', version: libVers.drv_org_postgresql

  compileOnly group: 'org.projectlombok', name: 'lombok', version: libVers.projectlombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: libVers.projectlombok

  providedCompile group: 'com.sun.faces', name: 'jsf-api', version: libVers.jsf
  providedCompile group: 'com.sun.faces', name: 'jsf-impl', version: libVers.jsf
  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: libVers.javax_servlet_api
  providedCompile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: hibernate_jpa_2_1_api

  testCompile group: 'io.thorntail', name: 'arquillian', version: libVers.thorntail
  testCompile group: 'io.thorntail', name: 'gradle-arquillian-adapter', version: libVers.thorntail
  testCompile group: 'io.thorntail', name: 'thorntail-gradle-tooling', version: libVers.thorntail

  testCompile group: 'org.assertj', name: 'assertj-core', version: libVers.assertj_core
  testCompile group: 'org.gradle', name: 'gradle-tooling-api', version: libVers.gradle_tooling_api
  testCompile group: 'org.hibernate', name: 'hibernate-core', version: libVers.hibernate
  testCompile group: 'org.hibernate', name: 'hibernate-entitymanager', version: libVers.hibernate

  testCompile group: 'org.jboss.arquillian.extension', name: 'arquillian-transaction-jta', version: libVers.arq_trn_jta
  testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container', version: libVers.arquillian
  testCompile group: 'org.jboss.logging', name: 'jboss-logging', version: libVers.jboss_logging
  testCompile group: 'org.jboss.naming', name: 'jnpserver', version: libVers.jnpserver
  testCompile group: 'org.jboss.narayana.jta', name: 'narayana-jta', version: libVers.narayana_jta
  testCompile group: 'org.jboss.spec.javax.transaction', name: 'jboss-transaction-api_1.2_spec', version: jb_trn_api_1_2
  testCompile group: 'org.jboss.weld', name: 'weld-junit5', version: libVers.weld_junit5
  testCompile group: 'org.jboss.weld.module', name: 'weld-ejb', version: libVers.jboss_weld_se
  testCompile group: 'org.jboss.weld.module', name: 'weld-jta', version: libVers.jboss_weld_se
  testCompile group: 'org.jboss.weld.se', name: 'weld-se-core', version: libVers.jboss_weld_se

  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: libVers.junit
  testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: libVers.junit_platform_launcher
  testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: libVers.junit
  testCompile group: 'org.mockito', name: 'mockito-core', version: libVers.mockito_core

  testCompile "junit:junit:4.12"
}

task showRepos {
    doLast {
        println "All repos:"
        println repositories.collect { it.name }
    }
}

static def buildTimestamp() {
  def date = new Date()
  def formattedDate = date.format('yyyyMMdd_HHmmss')
  return formattedDate.toString()
}

def db_password = getEnv('DBPASS', DATABASE_PASSWORD)
def db_url = getEnv('DBURL', DATABASE_URL)
def db_username = getEnv('DBUSER', DATABASE_USERNAME)

def timestamp = buildTimestamp()
def db_url_db = db_url + '?currentSchema=db'
def db_url_public = db_url + '?currentSchema=public'
def db_url_dictionary = db_url + '?currentSchema=dictionary'
def run_list = project.properties['runList'] ?: 'db_public, db_dictionary, db_db'

liquibase {
  activities {
    db_public {
      changeLogFile "src/main/db/public/Change_Log.xml"
      url db_url_public
      defaultSchemaName 'public'
      username db_username
      password db_password
    }
    db_dictionary {
      changeLogFile "src/main/db/dictionary/Change_Log.xml"
      url db_url_dictionary
      defaultSchemaName 'public'
      username db_username
      password db_password
    }
    db_db {
      changeLogFile "src/main/db/db/Change_Log.xml"
      url db_url_db
      defaultSchemaName 'public'
      username db_username
      password db_password
    }

    gen_dictionary {
      changeLogFile "src/test/docker/sql/10-changelogs-dictionary-${timestamp}.postgresql.sql"
      url db_url_dictionary
      defaultSchemaName 'dictionary'
      username db_username
      password db_password
    }
    gen_db {
      changeLogFile "src/test/docker/sql/20-changelogs-db-${timestamp}.postgresql.sql"
      url db_url_db
      defaultSchemaName 'db'
      username db_username
      password db_password
    }
  }
  runList = run_list
}

dockerCompose {
  useComposeFiles = [ 'src/test/docker/docker-compose.yml' ]
  stopContainers = true
  removeContainers = true
  composeLogToFile = project.file('build/my-logs.txt')
  containerLogToDir = project.file('build/logs')
}

minification {
  cssSrcDir = "${rootDir}/src/main/css"
  cssDstDir = "${rootDir}/src/main/webapp/resources/main/css"
  jsDstDir =  "${rootDir}/src/main/webapp/resources/main/js"
  jsSrcDir =  "${rootDir}/src/main/js"
}

test {
  useJUnitPlatform()
  maxHeapSize = '1G'
  testLogging {
    showStandardStreams = true
  }
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output + configurations.compileClasspath
      runtimeClasspath += main.output + test.output + configurations.runtimeClasspath
      srcDir file('src/test/it')
    }
    resources.srcDir file('src/test/resources')
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
  // The following property needed *only if* you have a pom.xml file along with your build.gradle script.
  // Otherwise, you do not need to set this property.
  systemProperty 'thorntail.filesystem.layout.class', 'org.wildfly.swarm.internal.GradleFileSystemLayout'
  systemProperty 'thorntailVersion', libVers.thorntail
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  // outputs.upToDateWhen { false }
}

def composeUp = project.properties['local'] ?: 'false'
// hooks 'dependsOn composeUp' and 'finalizedBy composeDown', and exposes environment variables and system properties
// (if possible)
// dockerCompose.isRequiredBy(integrationTest)
if (composeUp == 'true') {
  dockerCompose.isRequiredBy(integrationTest)
}

task cleanGenerated(type: Delete) {
  delete dirs.object_store
  delete dirs.out
  delete dirs.put_object_store_dir_here
}

clean.dependsOn cleanGenerated

