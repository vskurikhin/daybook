/*
 * Copyright 2019-2020
 */

buildscript {
  def liquibase_gradle_plugin = System.getProperty('VERSION_LIQUIBASE_GRADLE_PLUGIN') ?: VERSION_LIQUIBASE_GRADLE_PLUGIN
  def org_liquibase_version = System.getProperty('VERSION_ORG_LIQUIBASE') ?: VERSION_ORG_LIQUIBASE
  def thorntail_version = System.getProperty('VERSION_THORNTAIL') ?: VERSION_THORNTAIL

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath "gradle.plugin.com.avast.gradle:gradle-docker-compose-plugin:0.9.5"
    classpath "io.thorntail:thorntail-gradle-plugin:$thorntail_version"
    classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    classpath("org.liquibase:liquibase-gradle-plugin:$liquibase_gradle_plugin") {
      exclude(module: 'liquibase-core') // exclude the dependency on liquibase-core:3.6.3
    }
    classpath("org.liquibase:liquibase-core:$org_liquibase_version")

  }
}

apply plugin: 'com.avast.gradle.docker-compose'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'thorntail'
apply plugin: 'thorntail-arquillian'
apply plugin: 'war'

repositories {
  mavenCentral()
  mavenLocal()
}

def arquillian_trn_jta = '1.0.5'
def arquillian_version = '1.5.0.Final'
def assertj_core_version = '3.15.0'
def h2_database_version = '1.4.197'
def jboss_logging_version = '3.4.1.Final'
def jnpserver_version = '5.0.5.Final'
def junit_platform_launcher_version = '1.6.0'
def mockito_core_version = '3.2.4'
def narayana_jta_version = '5.10.3.Final'
def org_jboss_weld_se_version = '3.1.2.Final'
def org_junit_version = '5.6.0'
def weld_junit5_version = '2.0.1.Final'

static def getEnv(key, defaultValue) {
  return System.getenv(key) ?: defaultValue
}

def drv_org_postgresql_version = getEnv('VERSION_DRV_ORG_POSTGRESQL', VERSION_DRV_ORG_POSTGRESQL)
def gradle_tooling_api_version = getEnv('VERSION_GRADLE_TOOLING_API', VERSION_GRADLE_TOOLING_API)
def hibernate_jpa_2_1_api = getEnv('VERSION_HIBERNATE_JPA_2_1_API', VERSION_HIBERNATE_JPA_2_1_API)
def javax_servlet_api_version = getEnv('VERSION_JAVAX_SERVLET_API', VERSION_JAVAX_SERVLET_API)
def jsf_version = getEnv('VERSION_JSF', VERSION_JSF)
def liquibase_gradle_plugin_version = getEnv('VERSION_LIQUIBASE_GRADLE_PLUGIN', VERSION_LIQUIBASE_GRADLE_PLUGIN)
def liquibase_groovy_dsl_version = getEnv('VERSION_LIQUIBASE_GROOVY_DSL', VERSION_LIQUIBASE_GROOVY_DSL)
def org_hibernate_version = getEnv('VERSION_ORG_HIBERNATE', VERSION_ORG_HIBERNATE)
def org_liquibase_version = getEnv('VERSION_ORG_LIQUIBASE', VERSION_ORG_LIQUIBASE)
def org_slf4j_version = getEnv('VERSION_ORG_SLF4J_VERSION', VERSION_ORG_SLF4J_VERSION)
def projectlombok_version = getEnv('VERSION_PROJECTLOMBOK', VERSION_PROJECTLOMBOK)
def thorntail_version = getEnv('VERSION_THORNTAIL', VERSION_THORNTAIL)

dependencyManagement {
  imports {
    mavenBom "io.thorntail:bom-all:$thorntail_version"
    mavenBom "org.jboss.arquillian:arquillian-bom:$arquillian_version"
  }
}

dependencies {
  compile group: 'io.thorntail', name: 'thorntail-runner', version: thorntail_version
  compile group: 'org.postgresql', name: 'postgresql', version: drv_org_postgresql_version
  compile group: 'org.slf4j', name: 'slf4j-api', version: org_slf4j_version
  compile group: 'org.slf4j', name: 'slf4j-simple', version: org_slf4j_version

  compile "com.h2database:h2:$h2_database_version"
  compile "io.thorntail:bean-validation"
  compile "io.thorntail:cdi"
  compile "io.thorntail:datasources"
  compile "io.thorntail:ee-security"
  compile "io.thorntail:ejb"
  compile "io.thorntail:ejb-mdb"
  compile "io.thorntail:hibernate-validator"
  compile "io.thorntail:jpa"
  compile "io.thorntail:jsf"
  compile "io.thorntail:logging"
  compile "io.thorntail:logstash"
  compile "io.thorntail:microprofile-metrics"
  compile "io.thorntail:microprofile-restclient"
  compile "io.thorntail:undertow"

  liquibaseRuntime group: 'org.liquibase', name: 'liquibase-core', version: org_liquibase_version
  liquibaseRuntime group: 'org.liquibase', name: 'liquibase-gradle-plugin', version: liquibase_gradle_plugin_version
  liquibaseRuntime group: 'org.liquibase', name: 'liquibase-groovy-dsl', version: liquibase_groovy_dsl_version
  liquibaseRuntime group: 'org.postgresql', name: 'postgresql', version: drv_org_postgresql_version

  compileOnly group: 'org.projectlombok', name: 'lombok', version: projectlombok_version
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: projectlombok_version

  providedCompile group: 'com.sun.faces', name: 'jsf-api', version: jsf_version
  providedCompile group: 'com.sun.faces', name: 'jsf-impl', version: jsf_version
  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: javax_servlet_api_version
  providedCompile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: hibernate_jpa_2_1_api

  testCompile group: 'io.thorntail', name: 'gradle-arquillian-adapter', version: thorntail_version
  testCompile group: 'org.assertj', name: 'assertj-core', version: assertj_core_version
  testCompile group: 'org.gradle', name: 'gradle-tooling-api', version: gradle_tooling_api_version
  testCompile group: 'org.hibernate', name: 'hibernate-core', version: org_hibernate_version
  testCompile group: 'org.hibernate', name: 'hibernate-entitymanager', version: org_hibernate_version
  testCompile group: 'org.jboss.arquillian.extension', name: 'arquillian-transaction-jta', version: arquillian_trn_jta
  testCompile group: 'org.jboss.logging', name: 'jboss-logging', version: jboss_logging_version
  testCompile group: 'org.jboss.naming', name: 'jnpserver', version: jnpserver_version
  testCompile group: 'org.jboss.narayana.jta', name: 'narayana-jta', version: narayana_jta_version
  testCompile group: 'org.jboss.spec.javax.transaction', name: 'jboss-transaction-api_1.2_spec', version: '1.1.1.Final'
  testCompile group: 'org.jboss.weld', name: 'weld-junit5', version: weld_junit5_version
  testCompile group: 'org.jboss.weld.module', name: 'weld-ejb', version: org_jboss_weld_se_version
  testCompile group: 'org.jboss.weld.module', name: 'weld-jta', version: org_jboss_weld_se_version
  testCompile group: 'org.jboss.weld.se', name: 'weld-se-core', version: org_jboss_weld_se_version

  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: org_junit_version
  testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: junit_platform_launcher_version
  testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: org_junit_version
  testCompile group: 'org.mockito', name: 'mockito-core', version: mockito_core_version

  testCompile "junit:junit:4.12"
  testCompile "io.thorntail:arquillian:${thorntail_version}"
  testCompile "io.thorntail:gradle-arquillian-adapter:${thorntail_version}"
  testCompile "org.jboss.arquillian.junit:arquillian-junit-container:${arquillian_version}"
}

static def buildTimestamp() {
  def date = new Date()
  def formattedDate = date.format('yyyyMMdd_HHmmss')
  return formattedDate.toString()
}

def db_password = getEnv('DBPASS', DATABASE_PASSWORD)
def db_url = getEnv('DBURL', DATABASE_URL)
def db_username = getEnv('DBUSER', DATABASE_USERNAME)

def timestamp = buildTimestamp()
def db_url_db = db_url + '?currentSchema=db'
def db_url_public = db_url + '?currentSchema=public'
def db_url_dictionary = db_url + '?currentSchema=dictionary'
def run_list = project.properties['runList'] ?: 'db_public, db_dictionary, db_db'

liquibase {
  activities {
    db_public {
      changeLogFile "src/main/db/public/Change_Log.xml"
      url db_url_public
      defaultSchemaName 'public'
      username db_username
      password db_password
    }
    db_dictionary {
      changeLogFile "src/main/db/dictionary/Change_Log.xml"
      url db_url_dictionary
      defaultSchemaName 'public'
      username db_username
      password db_password
    }
    db_db {
      changeLogFile "src/main/db/db/Change_Log.xml"
      url db_url_db
      defaultSchemaName 'public'
      username db_username
      password db_password
    }

    gen_dictionary {
      changeLogFile "src/test/docker/sql/10-changelogs-dictionary-${timestamp}.postgresql.sql"
      url db_url_dictionary
      defaultSchemaName 'dictionary'
      username db_username
      password db_password
    }
    gen_db {
      changeLogFile "src/test/docker/sql/20-changelogs-db-${timestamp}.postgresql.sql"
      url db_url_db
      defaultSchemaName 'db'
      username db_username
      password db_password
    }
  }
  runList = run_list
}

dockerCompose {
  useComposeFiles = [ 'src/test/docker/docker-compose.yml' ]
  stopContainers = true
  removeContainers = true
  composeLogToFile = project.file('build/my-logs.txt')
  containerLogToDir = project.file('build/logs')
}

test {
  useJUnitPlatform()
  maxHeapSize = '1G'
}

task showRepos {
    doLast {
        println "All repos:"
        println repositories.collect { it.name }
    }
}
